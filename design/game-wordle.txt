## 游戏玩法
目标：玩家需要在六次机会中，猜出系统预设的一个五字单词。
操作方式：玩家通过界面输入五字母单词，按回车键提交猜测。
反馈机制：每次猜测后，系统通过颜色对玩家给出的答案做出反应。绿色表示字母和位置均正确，黄色代表字母正确但位置不正确，灰色则表示答案中没有这个字母。
游戏结束条件：玩家猜对单词或用尽六次猜测机会，游戏结束。结束后可分享由色块矩阵组成的今日战绩。

## Vue 前端设计
界面布局：设计一个 5×6 的表格用于显示猜测结果，下方是 26 个字母的虚拟键盘。可使用 Vue 组件化思想，将表格和键盘分别封装成组件。
数据绑定：使用 Vue 的数据绑定功能，将玩家输入的单词与组件中的数据属性绑定，方便后续处理。
交互逻辑：为键盘按钮添加点击事件或监听输入框回车键事件，获取玩家输入的单词并发送给后端。根据后端返回的结果，更新表格中字母的颜色状态。
游戏状态管理：使用 Vuex 管理游戏状态，如剩余猜测次数、是否游戏结束、当前猜测结果等，以便在不同组件间共享数据。
动画效果：可添加简单的动画效果，如字母变色动画，增强用户体验。

## Java 后端设计
单词库管理：已经有一个包含五字母单词的词库文件，放在Resource/words.txt下
接口设计：提供一个生成一次游戏的借口，如/startWordle，前端通过post请求将用户名发送给后端，后端会从Resource/words.txt的14855个单词中抽取一个作为本次答案，存储在本地。提供一个验证玩家猜测的接口，如/guess，前端通过 POST 请求将用户名和猜测的单词发送给后端，后端验证后返回猜测结果，结果用特定符号表示字母的正确与否及位置情况，如 “++x--” 表示前两个字母正确且位置正确，第三个字母正确但位置错误，后两个字母错误。
业务逻辑处理：在验证猜测的接口逻辑中，对比玩家输入的单词和本次答案，判断每个字母的状态并返回相应结果。同时，记录玩家的猜测次数，若达到六次则结束游戏。
错误处理：对前端传入的非法数据进行处理，如非字符串数据或长度不为 5 的单词，返回错误信息给前端。

## 注意：
1.wordle游戏只存在于第四关的核心玩法框，其他的关卡名称、关卡编号和提示，需要从获取/level/{uuid}获取。请模仿已有的前端实现。
2.后端的接口已经实现